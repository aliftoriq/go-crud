definitions:
  controllers.Article:
    properties:
      content:
        type: string
      email:
        type: string
      title:
        type: string
    type: object
  controllers.GetArticleByIDResponseSwag:
    properties:
      data:
        $ref: '#/definitions/controllers.Article'
      message:
        type: string
    type: object
  controllers.GetArticlesResponseswag:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.Article'
        type: array
      message:
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.User'
      message:
        type: string
      token:
        type: string
    type: object
  controllers.Response:
    properties:
      message:
        type: string
    type: object
  controllers.ResponseErr:
    properties:
      error:
        type: string
    type: object
  controllers.SignupRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  controllers.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:4001
info:
  contact: {}
  description: A golang Restfull API
  title: Tag Go Crud Service API
  version: "1.0"
paths:
  /articles:
    get:
      consumes:
      - application/json
      description: Get a list of articles from the cache or database
      parameters:
      - description: User Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetArticlesResponseswag'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
      summary: Get a list of articles
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: Create a new article with title and content
      parameters:
      - description: User Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Article creation details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.Article'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
      summary: Create a new article
      tags:
      - articles
  /articles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an article by providing its ID
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      - description: User Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
      summary: Delete an article by its ID
      tags:
      - articles
    get:
      consumes:
      - application/json
      description: Get an article by providing its ID
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      - description: User Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetArticleByIDResponseSwag'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
      summary: Get an article by its ID
      tags:
      - articles
    put:
      consumes:
      - application/json
      description: Update article with title and content by ID
      parameters:
      - description: User Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      - description: Article creation details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.Article'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
      summary: Update article
      tags:
      - articles
  /login:
    post:
      consumes:
      - application/json
      description: Log in to the system to get a user token.
      parameters:
      - description: User login details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
      summary: Login user
      tags:
      - users
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user with a raw JSON request body containing name,
        email, and password
      parameters:
      - description: User registration details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ResponseErr'
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
